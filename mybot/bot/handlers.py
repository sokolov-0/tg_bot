# handlers.py –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from asgiref.sync import sync_to_async
from django.conf import settings
from bot.models import Clients
from bot.vpn_service import create_vpn_key
from bot.utils import is_user_subscribed
from bot.admin_handlers import notify_admin
from django.utils import timezone
from telegram.ext import CallbackQueryHandler
from bot.admin_handlers import get_tariff_keyboard 
from babel.dates import format_date

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_STATE_USER_REQUEST = 1
GET_STATE_TARIFF = 2

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
        "ArtBasilioBot ‚Äì –±–æ—Ç VPN-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üîí. –Ø –ø–æ–º–æ–≥–∞—é –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –∑–∞—è–≤–∫—É! \n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–±—Ä–∞—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç–∞—Ä–∏—Ñ, –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å VPN-–∫–ª—é—á —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π. ‚úÖ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É. ‚¨áÔ∏è"
    )
    logger.info(f"/start –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_id}")
    keyboard = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="user_request")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return GET_STATE_USER_REQUEST

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    support_text = (
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
        "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @sokolov_000000\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: —Å 09:00 –¥–æ 18:00 –ø–æ –ú–°–ö\n\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.‚ù§Ô∏è‚Äçü©π"
    )
    await update.message.reply_text(support_text)

# –ö–æ–º–∞–Ω–¥–∞ /subscription ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
async def subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    try:
        client = await sync_to_async(Clients.objects.get)(user_id=user_id)
    except Clients.DoesNotExist:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
        return

    today = timezone.now().date()
    if client.subscription_end_date:
        days_left = (client.subscription_end_date - today).days
        formatted_end = format_date(client.subscription_end_date, format="d MMMM yyyy", locale="ru")
    else:
        days_left = None
        formatted_end = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    if days_left is None:
        reply_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞."
    elif days_left > 0:
        reply_text = (
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –∏—Å—Ç–µ–∫–∞–µ—Ç {formatted_end}.\n"
            f"–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.\n"
        )
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 2 –¥–Ω–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        if days_left < 2:
            reply_text += "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"renew_yes_{user_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"renew_no_{user_id}")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(reply_text, reply_markup=markup)
            return
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        reply_text = (
            "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
        )
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="user_request")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(reply_text, reply_markup=markup)
        return

    await update.message.reply_text(reply_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    await sync_to_async(Clients.objects.update_or_create)(
        user_id=user.id,
        defaults={
            "name": user.username or user.first_name,
            "status": "pending"
        }
    )
    await query.edit_message_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await notify_admin(user, context)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã
async def handle_payment_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª".
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤–µ–¥—ë—Ç—Å—è.
    """
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    try:
        # –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∞: "payment_done_{user_id}"
        _, user_id_str = data[0], data[1]
        user_id = int(user_id_str)
    except (IndexError, ValueError):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–≤–∏–º awaiting_verification)
    try:
        client = await sync_to_async(Clients.objects.get)(user_id=user_id)
        client.payment_status = "awaiting_verification"
        await sync_to_async(client.save)()
    except Clients.DoesNotExist:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –ø–µ—Ä–µ–≤–æ–¥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª, —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º.
    # –ù–∞–ø—Ä–∏–º–µ—Ä: await notify_admin_payment(user, context)
    return ConversationHandler.END





async def handle_renewal_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data.split("_")
        action, user_id = data[1], int(data[2])
    except (IndexError, ValueError):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    try:
        if action == "yes":
            tariff_markup = get_tariff_keyboard(user_id)
            await context.bot.send_message(
                chat_id=user_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=tariff_markup
            )
            await query.edit_message_text("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
        else:
            await query.edit_message_text("‚ö†Ô∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –í–∞—à –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—Å–∫–æ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω.")
            logger.info(f"–ö–ª–∏–µ–Ω—Ç {user_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
async def handle_tariff_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    
    if len(data) < 3:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞.")
        return ConversationHandler.END

    tariff_code, user_id_str = data[1], data[2]
    
    try:
        user_id = int(user_id_str)
    except ValueError:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    tariff_map = {
        "1month": ("1 –º–µ—Å—è—Ü", "–û–¥–∏–Ω –º–µ—Å—è—Ü"),
        "3months": ("3 –º–µ—Å—è—Ü–∞", "–¢—Ä–∏ –º–µ—Å—è—Ü–∞"),
        "6months": ("6 –º–µ—Å—è—Ü–µ–≤", "–ü–æ–ª–≥–æ–¥–∞")
    }
    
    if tariff_code not in tariff_map:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∞—Ä–∏—Ñ.")
        return ConversationHandler.END
        
    tariff_text, tariff_display = tariff_map[tariff_code]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞
        client_obj = await sync_to_async(Clients.objects.get)(user_id=user_id)
        client_obj.tariff = tariff_text
        client_obj.status = "approved"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞!
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç—Å—è renew_subscription)
        await sync_to_async(client_obj.save)()
        
    except Clients.DoesNotExist:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    start_date = client_obj.subscription_start_date.strftime('%-d %B %Y –≥.') if client_obj.subscription_start_date else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    end_date = client_obj.subscription_end_date.strftime('%-d %B %Y –≥.') if client_obj.subscription_end_date else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ access_url
    if not client_obj.access_url:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω accessUrl. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        from bot.instructions import INSTRUCTION_TEXT
        message = (
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff_display}\n"
            f"–ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: —Å {start_date} –¥–æ {end_date}\n\n"
            f"{INSTRUCTION_TEXT}\n\n"
            f"üîë –í–∞—à accessUrl:\n{client_obj.access_url}"
        )
        
        await context.bot.send_message(chat_id=user_id, text=message)
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

    return ConversationHandler.END

 
# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return ConversationHandler.END
