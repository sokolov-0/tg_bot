# handlers.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from asgiref.sync import sync_to_async
from django.conf import settings
from bot.models import Clients
from bot.vpn_service import create_vpn_key
from bot.admin_handlers import notify_admin, get_tariff_keyboard  # notify_admin –¥–ª—è –∑–∞—è–≤–æ–∫
from django.utils import timezone
from babel.dates import format_date

logger = logging.getLogger(__name__)

GET_STATE_USER_REQUEST = 1
GET_STATE_TARIFF = 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ä–∞–∑—É –ø—Ä–æ–¥–ª–∏—Ç—å
    today = timezone.now().date()
    try:
        client = await sync_to_async(Clients.objects.get)(user_id=user_id)
    except Clients.DoesNotExist:
        client = None

    if client and client.subscription_end_date and client.subscription_end_date >= today:
        end_str = format_date(client.subscription_end_date, format="d MMMM yyyy", locale="ru")
        text = (
            f"üòá –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_str}.\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë –Ω–∞ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥? üëç"
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É!", callback_data=f"renew_yes_{user_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"renew_no_{user_id}")]
        ]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return GET_STATE_TARIFF

    welcome_text = (
         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"
         "ArtBasilioBot ‚Äì –±–æ—Ç VPN‚Äë—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üîí.\n"
         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É. ‚¨áÔ∏è"
     )
    keyboard = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="user_request")]]
    await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_STATE_USER_REQUEST


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    support_text = (
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
        "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @sokolov_000000\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: —Å 09:00 –¥–æ 18:00 –ø–æ –ú–°–ö\n"
    )
    await update.message.reply_text(support_text)

async def subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    try:
        client = await sync_to_async(Clients.objects.get)(user_id=user_id)
    except Clients.DoesNotExist:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É. ‚ú®")
        return ConversationHandler.END   # <‚Äî –≤–æ—Ç —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    today = timezone.now().date()
    if client.subscription_end_date:
        days_left = (client.subscription_end_date - today).days
        formatted_end = format_date(client.subscription_end_date, format="d MMMM yyyy", locale="ru")
    else:
        days_left, formatted_end = None, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    if days_left is None:
        reply_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞."
    elif days_left > 0:
        reply_text = (
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –∏—Å—Ç–µ–∫–∞–µ—Ç {formatted_end}.\n"
            f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.\n"
        )
        if days_left < 2:
            reply_text += "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"renew_yes_{user_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"renew_no_{user_id}")]
            ]
            await update.message.reply_text(reply_text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
    else:
        reply_text = "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
        keyboard = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="user_request")]]
        await update.message.reply_text(reply_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    await update.message.reply_text(reply_text)

async def handle_user_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user = query.from_user
    await sync_to_async(Clients.objects.update_or_create)(
        user_id=user.id,
        defaults={
            "name": user.username or user.first_name,
            "status": "pending"
        }
    )
    await query.edit_message_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üòä")
    await notify_admin(user, context)  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    return ConversationHandler.END

async def handle_tariff_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, code, user_id_str = query.data.split("_")
    user_id = int(user_id_str)

    tariff_map = {
        "1month": ("1 –º–µ—Å—è—Ü", "100—Ä"),
        "3months": ("3 –º–µ—Å—è—Ü–∞", "250—Ä"),
        "6months": ("6 –º–µ—Å—è—Ü–µ–≤", "500—Ä")
    }
    tariff_text, tariff_amount = tariff_map[code]

    client = await sync_to_async(Clients.objects.get)(user_id=user_id)
    client.tariff = tariff_text
    client.status = "approved"
    await sync_to_async(client.save)()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ –∏ —Å—Ç–∞—Ç—É—Å

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
    payment_instructions = (
        f"‚ú®–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_text} ‚Äî {tariff_amount}.\n\n"
        "‚úÖ–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä ‚û°Ô∏è +79991712428.\n –í—ã–±–µ—Ä–µ—Ç–µ –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¢‚Äë–±–∞–Ω–∫, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram-–Ω–∏–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É \n(–ù–∞ –∞–π–æ–Ω–µ üçè: –ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  .\n –ù–∞ –∞–Ω–¥—Ä–æ–π–¥–µüì±:–í –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏ - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ).\n"
        "üí≥ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª."
    )
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª üí≥", callback_data=f"user_paid_{user_id}")]])
    await context.bot.send_message(chat_id=user_id, text=payment_instructions, reply_markup=markup)
    await query.edit_message_text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°.")
    return ConversationHandler.END


async def handle_payment_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª".
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.
    """
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    try:
        # –û–∂–∏–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∞: "user_paid_{user_id}"
        if len(data) < 3:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
            return ConversationHandler.END
        user_id = int(data[2])
    except (IndexError, ValueError):
        await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
        return ConversationHandler.END

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ update()
    updated = await sync_to_async(
        Clients.objects.filter(user_id=user_id).update
    )(payment_status="awaiting_verification")
    if not updated:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
    client_obj = await sync_to_async(Clients.objects.get)(user_id=user_id)

    await query.edit_message_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚è≥"
    )



    from bot.admin_handlers import notify_admin_payment
    await notify_admin_payment(client_obj, context)

    return ConversationHandler.END

async def handle_renewal_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, action, user_id_str = query.data.split("_")
    user_id = int(user_id_str)

    if action == "yes":
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
        markup = get_tariff_keyboard(user_id)
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚Äî¬†–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
            reply_markup=markup
        )
        return ConversationHandler.END

    # action == "no": –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    await query.edit_message_text(
        "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. "
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."
    )
    logger.info(f"–ö–ª–∏–µ–Ω—Ç {user_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return ConversationHandler.END
