import logging
import asyncio
from datetime import timedelta
from django.core.management.base import BaseCommand
from django.utils import timezone
import httpx
from telegram import Bot
from django.conf import settings
from bot.models import Clients
from babel.dates import format_date
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)
VPN_BASE_URL = "https://185.125.203.136:58845/ABPwPgIi2fiDV1uS0LKi5Q/access-keys/"

class Command(BaseCommand):
    help = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø—Ä–æ–¥–ª–∏–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫—É."

    async def send_notification(self, bot, client):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        try:
            formatted_date = format_date(client.subscription_end_date, format="d MMMM yyyy", locale="ru")
            message_text = (
                f"‚ö†Ô∏è –í–∞—à —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ ({formatted_date}).\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n"
                "üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
                "1 –º–µ—Å—è—Ü - 100—Ä\n"
                "3 –º–µ—Å—è—Ü–∞ - 250—Ä\n"
                "6 –º–µ—Å—è—Ü–µ–≤ - 500—Ä"
            )
            await bot.send_message(chat_id=client.user_id, text=message_text)
            self.stdout.write(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç {client.user_id}: –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {formatted_date}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client.user_id}: {e}")

    async def get_expiring_clients(self, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –≤ 'date'."""
        return await sync_to_async(list)(Clients.objects.filter(status="approved", subscription_end_date=date))

    async def get_expired_clients(self, date):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Ä–∞–Ω—å—à–µ —á–µ–º 'date'."""
        return await sync_to_async(list)(Clients.objects.filter(status="approved", subscription_end_date__lt=date))

    async def handle_async(self):
        today = timezone.now().date()
        bot = Bot(token=settings.TOKEN)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 31.03.2025, then notify_date = 01.04.2025.
        notify_date = today + timedelta(days=1)
        expiring_clients = await self.get_expiring_clients(notify_date)
        tasks = [self.send_notification(bot, client) for client in expiring_clients]
        await asyncio.gather(*tasks)

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞:
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 02.04.2025, –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö subscription_end_date < 02.04.2025 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.04.2025)
        expired_clients = await self.get_expired_clients(today)
        for client in expired_clients:
            if client.vpn_id:
                delete_url = f"{VPN_BASE_URL}{client.vpn_id}"
                try:
                    response = await asyncio.get_running_loop().run_in_executor(
                        None, lambda: httpx.delete(delete_url, verify=False)
                    )
                    if response.status_code == 204:
                        self.stdout.write(f"[–û—Ç–∫–ª—é—á–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç {client.user_id} –æ—Ç–∫–ª—é—á–µ–Ω (vpn_id: {client.vpn_id})")
                    else:
                        self.stdout.write(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.user_id}, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client.user_id}: {e}")
            else:
                self.stdout.write(f"[–û—Ç–∫–ª—é—á–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç {client.user_id} –Ω–µ –∏–º–µ–µ—Ç vpn_id")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 'pending'
            client.status = "pending"
            await sync_to_async(client.save)()
            self.stdout.write(f"[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –ö–ª–∏–µ–Ω—Ç {client.user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å 'pending'")

    def handle(self, *args, **options):
        asyncio.run(self.handle_async())
