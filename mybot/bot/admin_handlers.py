# admin_handlers.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from asgiref.sync import sync_to_async
from django.conf import settings
from bot.models import Clients
from bot.vpn_service import create_vpn_key
from mybot.settings import ADMIN_IDS
from django.utils import timezone
from dateutil.relativedelta import relativedelta
from bot.instructions import INSTRUCTION_TEXT


logger = logging.getLogger(__name__)

def get_tariff_keyboard(user_id):
    tariff_keyboard = [
        [
            InlineKeyboardButton("1 –º–µ—Å—è—Ü - 100—Ä", callback_data=f"tariff_1month_{user_id}"),
            InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 250—Ä", callback_data=f"tariff_3months_{user_id}")
        ],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 500—Ä", callback_data=f"tariff_6months_{user_id}")]
    ]
    return InlineKeyboardMarkup(tariff_keyboard)

def get_payment_confirmation_keyboard(user_id, tariff_display, amount):
    keyboard = [
        [
            InlineKeyboardButton(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω ({amount}—Ä, {tariff_display})", callback_data=f"payment_success_{user_id}"),
            InlineKeyboardButton("–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª", callback_data=f"payment_fail_{user_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def notify_admin(user, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.
    """
    try:
        client_obj = await sync_to_async(Clients.objects.get)(user_id=user.id)
    except Clients.DoesNotExist:
        client_obj = None

    admin_keyboard = [
        [
            InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{user.id}"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{user.id}")
        ]
    ]
    admin_markup = InlineKeyboardMarkup(admin_keyboard)
    message = f"–ó–∞—è–≤–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª VPN –¥–æ—Å—Ç—É–ø."

    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ —É –Ω–µ—ë –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if client_obj is not None and hasattr(client_obj, 'tariff') and client_obj.tariff:
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        message += f"\n–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {client_obj.tariff}"
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç_obj –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—É tariff

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=admin_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def handle_admin_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query.from_user.id not in ADMIN_IDS:
        await update.callback_query.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True
        )
        return

    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    if len(data) < 3:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.")
        return

    decision, user_id_str = data[1], data[2]
    try:
        user_id = int(user_id_str)
    except ValueError:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if decision == "approve":
        # === –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ ===
        try:
            client_obj = await sync_to_async(Clients.objects.get)(user_id=user_id)
        except Clients.DoesNotExist:
            logger.error(f"–ö–ª–∏–µ–Ω—Ç {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

       # === –°—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –±–µ–∑ .save(), –∏–Ω–∞—á–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç renew_subscription() –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ ===
        updated = await sync_to_async(
            Clients.objects.filter(user_id=user_id, status="pending").update
        )(status="approved")
        if not updated:
            return await query.edit_message_text(
                "‚ö†Ô∏è –≠—Ç—É –∑–∞—è–≤–∫—É —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            )

        logger.info(f"–ó–∞—è–≤–∫–∞ {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞, –¥–∞—Ç—ã: {client_obj.subscription_start_date}‚Äì{client_obj.subscription_end_date}")

        # === –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã ===
        tariff_markup = get_tariff_keyboard(user_id)
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ü§ù!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚¨áÔ∏è‚¨áÔ∏è:",
                reply_markup=tariff_markup
            )
            await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–∞—Ä–∏—Ñ—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤.")
        return

    elif decision == "reject":
        # –ø—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, –±–µ–∑ –ª–æ–≥–∏–∫–∏ –¥–∞—Ç
        updated = await sync_to_async(
            Clients.objects.filter(user_id=user_id, status="pending").update
        )(status="rejected")
        if not updated:
            return await query.edit_message_text(
                "‚ö†Ô∏è –≠—Ç—É –∑–∞—è–≤–∫—É —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            )
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üò™ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ ."
            )
            await query.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    else:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.")
        return

from django.db import transaction

async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, result, user_id_str = query.data.split("_")
    user_id = int(user_id_str)

    if query.from_user.id not in ADMIN_IDS:
        return await query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)

    if result == "success":
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
        # 1) –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω "awaiting_verification"
        updated = await sync_to_async(
            Clients.objects.filter(user_id=user_id, payment_status="awaiting_verification").update
        )(payment_status="paid")
        if not updated:
            return await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

        # 2) –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–π –∫–ª–∏–µ–Ω—Ç –∏–∑ –ë–î
        client_obj = await sync_to_async(Clients.objects.get)(user_id=user_id)

        # 3) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
        months = {"1 –º–µ—Å—è—Ü": 1, "3 –º–µ—Å—è—Ü–∞": 3, "6 –º–µ—Å—è—Ü–µ–≤": 6}.get(client_obj.tariff, 0)
        today = timezone.now().date()
        if client_obj.subscription_end_date and client_obj.subscription_end_date > today:
            new_start = client_obj.subscription_end_date
        else:
            new_start = today
        new_end = new_start + relativedelta(months=months)

        # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ –ë–î
        await sync_to_async(
            Clients.objects.filter(user_id=user_id).update
        )(
            subscription_start_date=new_start,
            subscription_end_date=new_end
        )

        # 5) –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å access_url)
        client_obj = await sync_to_async(Clients.objects.get)(user_id=user_id)

        # 6) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á **—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏** –µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ –Ω–µ—Ç
        if not client_obj.access_url:
            key_data = await create_vpn_key(name=client_obj.name, user_id=client_obj.user_id)
            if not key_data:
                return await query.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∫–ª—é—á–∞.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª—é—á–∞
            await sync_to_async(
                Clients.objects.filter(user_id=user_id).update
            )(
                vpn_id=str(key_data["id"]),
                access_url=key_data["accessUrl"],
                password=key_data["password"],
                port=key_data["port"],
                method=key_data["method"]
            )
            access_url = key_data["accessUrl"]
        else:
            access_url = client_obj.access_url

        # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ
        text = (
            "‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
            f"–í–∞—à VPN –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {new_end.strftime('%d.%m.%Y')}.\n\n"
            f"{INSTRUCTION_TEXT}"
        )
        await context.bot.send_message(chat_id=user_id, text=text)

        key_msg = (
            "üîë –í–∞—à –∫–ª—é—á –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è(–ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—åüì≤ ):\n"
            f"```\n{access_url}\n```"
        )
        await context.bot.send_message(
            chat_id=user_id,
            text=key_msg,
            parse_mode="Markdown"
        )
        await query.edit_message_text("–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ.")
    else:
        # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Ç–∫–∞–∑–∞: —Ç–æ–ª—å–∫–æ UPDATE –∏ return, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        updated = await sync_to_async(
            Clients.objects.filter(user_id=user_id, payment_status="awaiting_verification").update
        )(payment_status="failed")
        if not updated:
            return await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await context.bot.send_message(chat_id=user_id, text="–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª ‚ùå. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–∞–Ω–¥–æ–π /help ‚öôÔ∏è.")
        await query.edit_message_text("–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")



async def notify_admin_payment(client_obj, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.
    –°–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    tariff_map = {
        "1 –º–µ—Å—è—Ü": ("1 –º–µ—Å—è—Ü", "100—Ä"),
        "3 –º–µ—Å—è—Ü–∞": ("3 –º–µ—Å—è—Ü–∞", "250—Ä"),
        "6 –º–µ—Å—è—Ü–µ–≤": ("6 –º–µ—Å—è—Ü–µ–≤", "500—Ä")
    }
    tariff_display, amount = tariff_map.get(client_obj.tariff, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "0"))
    message = (
        f"–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {client_obj.name} (ID: {client_obj.user_id}).\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tariff_display}.\n"
        f"–°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {amount}.\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    )
    keyboard = [
        [
            InlineKeyboardButton("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω", callback_data=f"payment_success_{client_obj.user_id}"),
            InlineKeyboardButton("–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª", callback_data=f"payment_fail_{client_obj.user_id}")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
